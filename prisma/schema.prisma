// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RideStatus {
  REQUESTED
  ACCEPTED
  INITIALIZED
  FINISHED
  CANCELED
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  phoneNumber    String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  ride           Ride[]
  CommonPlaces   CommonPlaces[]
  FavoriteDriver FavoriteDriver[]
}

model Ride {
  id                       Int        @id @default(autoincrement())
  userId                   Int
  driverId                 Int
  password                 String
  initialLatitudeLocation  String
  initialLongitudeLocation String
  finalLatitudeLoction     String
  finalLongitudeLocation   String
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @default(now())
  status                   RideStatus @default(REQUESTED)
  user                     User       @relation(fields: [userId], references: [id])
  driver                   Driver     @relation(fields: [driverId], references: [id])
}

model CommonPlaces {
  id        Int      @id @default(autoincrement())
  name      String
  latitude  String
  longitude String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model FavoriteDriver {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  driver    Driver   @relation(fields: [driverId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    Int
  driverId  Int
}

model Driver {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  phoneNumber    String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  car            Car[]
  ride           Ride[]
  FavoriteDriver FavoriteDriver[]
}

model Car {
  id       Int     @id @default(autoincrement())
  plate    String  @unique
  model    String
  brand    String
  driverId Int?
  driver   Driver? @relation(fields: [driverId], references: [id])
}
