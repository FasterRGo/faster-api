// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RideStatus {
  REQUESTED
  ACCEPTED
  INITIALIZED
  FINISHED
  CANCELED
}

enum InviteStatus {
  IN_USE
  REVOKED
  PENDING
  PASSENGER
  DRIVER
  WATCHER_LEFT
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  phoneNumber    String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ride           Ride[]
  CommonPlaces   CommonPlaces[]
  FavoriteDriver FavoriteDriver[]
  PaymentMethod  PaymentMethod[]
  Invites        Invite[]
  roomId         String?
}

model Ride {
  id                       Int        @id @default(autoincrement())
  userId                   Int
  driverId                 Int?
  initialLatitudeLocation  Float
  initialLongitudeLocation Float
  finalLatitudeLocation    Float
  finalLongitudeLocation   Float
  price                    Float
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  status                   RideStatus @default(REQUESTED)
  User                     User       @relation(fields: [userId], references: [id])
  Driver                   Driver?    @relation(fields: [driverId], references: [id])
  Room                     Room?
  roomId                   String?
}

model DefaultPaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id             Int      @id @default(autoincrement())
  userId         Int
  number         String   @unique
  cvv            String
  expirationDate String
  type           String
  flag           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, number])
}

model CommonPlaces {
  id        Int      @id @default(autoincrement())
  name      String
  latitude  String
  longitude String
  icon      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteDriver {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  driver    Driver   @relation(fields: [driverId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  driverId  Int
}

model Driver {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  phoneNumber    String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  car            Car[]
  ride           Ride[]
  FavoriteDriver FavoriteDriver[]
  Invite         Invite[]
}

model Car {
  id       Int     @id @default(autoincrement())
  plate    String  @unique
  model    String
  brand    String
  year     String
  chassi   String
  driverId Int?
  driver   Driver? @relation(fields: [driverId], references: [id])
}

model Invite {
  id       Int          @unique @default(autoincrement())
  status   InviteStatus
  socketId String?
  userId   Int?
  driverId Int?
  Room     Room         @relation(fields: [roomId], references: [id])
  roomId   String
  User     User?        @relation(fields: [userId], references: [id])
  Driver   Driver?      @relation(fields: [driverId], references: [id])
}

model Room {
  id      String   @id @default(uuid())
  invites Invite[]
  Ride    Ride     @relation(fields: [rideId], references: [id])
  rideId  Int      @unique
}
