// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RideStatus {
  REQUESTED
  ACCEPTED
  INITIALIZED
  FINISHED
  CANCELED
}

enum InviteStatus {
  IN_USE
  REVOKED
  PENDING
  PASSENGER
  DRIVER
  WATCHER_LEFT
}

enum CommentedBy {
  DRIVER
  PASSENGER
}

model User {
  id              Int                      @id @default(autoincrement())
  name            String
  email           String                   @unique
  password        String
  phoneNumber     String                   @unique
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  ride            Ride[]
  CommonPlaces    CommonPlaces[]
  FavoriteDriver  FavoriteDriver[]
  PaymentMethod   PaymentMethod[]
  Invites         Invite[]
  scheduledRides  ScheduledRidePassenger[]
  ScheduledRide   ScheduledRide?           @relation(fields: [scheduledRideId], references: [id])
  scheduledRideId String?
}

model Rate {
  id          Int         @id @default(autoincrement())
  rideId      String
  rate        Int?
  description String?
  commentedBy CommentedBy

  Ride            Ride           @relation(fields: [rideId], references: [id])
  ScheduledRide   ScheduledRide? @relation(fields: [scheduledRideId], references: [id])
  scheduledRideId String?
}

model Ride {
  id                       String     @id @default(uuid())
  userId                   Int
  driverId                 Int?
  roomId                   String?    @unique
  initialLatitudeLocation  Float
  initialLongitudeLocation Float
  finalLatitudeLocation    Float
  finalLongitudeLocation   Float
  price                    Float
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  status                   RideStatus @default(REQUESTED)
  User                     User       @relation(fields: [userId], references: [id])
  Driver                   Driver?    @relation(fields: [driverId], references: [id])
  Rate                     Rate[]
  Room                     Room?      @relation(fields: [roomId], references: [id])
}

model ScheduledRide {
  id                       String                   @id @default(uuid())
  driverId                 Int
  initialLatitudeLocation  Float
  initialLongitudeLocation Float
  finalLatitudeLocation    Float
  finalLongitudeLocation   Float
  originCity               String
  destinationCity          String
  price                    Float
  scheduledDate            String
  maxPassengers            Int                      @default(1)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  status                   String
  Rate                     Rate[]
  ScheduledRidePassenger   ScheduledRidePassenger[]
  User                     User[]
  Driver                   Driver                   @relation(fields: [driverId], references: [id])
  Room                     Room[]
}

model ScheduledRidePassenger {
  id              String @id @default(uuid())
  scheduledRideId String
  userId          Int
  status          String

  scheduledRide ScheduledRide @relation(fields: [scheduledRideId], references: [id], onDelete: Cascade)
  User          User          @relation(fields: [userId], references: [id])

  @@unique([scheduledRideId, userId])
}

model DefaultPaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id             Int      @id @default(autoincrement())
  userId         Int
  number         String   @unique
  cvv            String
  expirationDate String
  type           String
  flag           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, number])
}

model CommonPlaces {
  id        Int      @id @default(autoincrement())
  name      String
  latitude  String
  longitude String
  icon      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteDriver {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  driver    Driver   @relation(fields: [driverId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  driverId  Int
}

model Driver {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  phoneNumber    String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isWorking      Boolean          @default(false)
  socketId       String?
  car            Car[]
  ride           Ride[]
  FavoriteDriver FavoriteDriver[]
  Invite         Invite[]
  ScheduledRide  ScheduledRide[]
}

model Car {
  id       Int     @id @default(autoincrement())
  plate    String  @unique
  model    String
  brand    String
  year     String
  chassi   String
  driverId Int?
  driver   Driver? @relation(fields: [driverId], references: [id])
}

enum Creation {
  DRIVER
  PASSENGER
  SYSTEM
}

model Invite {
  id        Int          @id @default(autoincrement())
  status    InviteStatus
  createdBy Creation     @default(SYSTEM)
  email     String?
  socketId  String?
  userId    Int?
  driverId  Int?
  User      User?        @relation(fields: [userId], references: [id])
  Driver    Driver?      @relation(fields: [driverId], references: [id])
  roomId    String
  Room      Room         @relation(fields: [roomId], references: [id])
}

model Room {
  id              String         @id @default(uuid()) // Id num√©rico para alinhar com Ride
  active          Boolean        @default(true)
  invites         Invite[]
  Ride            Ride?
  ScheduledRide   ScheduledRide? @relation(fields: [scheduledRideId], references: [id])
  scheduledRideId String?
}
